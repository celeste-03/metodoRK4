{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":""},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p>Este proyecto documenta el m\u00e9todo de Runge-Kutta de cuarto orden (RK4) para resolver ecuaciones diferenciales ordinarias. En este caso, aplicamos el m\u00e9todo al problema din\u00e1mico de valor inicial:</p> \\[ \\frac{dy}{dt} = f(t, y); \\quad y(t_0) = y_0 \\]"},{"location":"explanation/","title":"Explicaci\u00f3n del M\u00e9todo RK4","text":"<p>El m\u00e9todo RK4 es un m\u00e9todo num\u00e9rico para aproximar soluciones de ecuaciones diferenciales ordinarias. Calcula cuatro inclinaciones intermedias para mejorar la precisi\u00f3n de la soluci\u00f3n en cada paso:</p> <p>[ k_1 = h f(t_n, y_n) ] [ k_2 = h f(t_n + \\frac{h}{2}, y_n + \\frac{k_1}{2}) ] [ k_3 = h f(t_n + \\frac{h}{2}, y_n + \\frac{k_2}{2}) ] [ k_4 = h f(t_n + h, y_n + k_3) ]</p> <p>Finalmente, la soluci\u00f3n en el siguiente paso es:</p> \\[ y_{n+1} = y_n + \\frac{1}{6}(k_1 + 2k_2 + 2k_3 + k_4) \\]"},{"location":"tutorials/","title":"Ejemplo de uso","text":"<p>A continuaci\u00f3n, se muestra un ejemplo de uso del m\u00e9todo RK4 aplicado a la ecuaci\u00f3n \\( \\frac{dy}{dt} = -i[O, y(t)] \\):</p> <p>```python import numpy as np import matplotlib.pyplot as plt</p> <p>def rk4(f, y0, t0, h, n):     t = t0     y = y0     for i in range(n):         k1 = h * f(t, y)         k2 = h * f(t + h/2, y + k1/2)         k3 = h * f(t + h/2, y + k2/2)         k4 = h * f(t + h, y + k3)         y += (k1 + 2*k2 + 2k3 + k4) / 6         t += h     return y</p>"},{"location":"tutorials/#graficar-los-resultados","title":"Graficar los resultados","text":"<p>O = np.array([[0, 1], [-1, 0]]) y0 = np.array([1, 0], dtype=complex) y = rk4(lambda t, y: -1j * O @ y, y0, 0, 0.01, 100)</p> <p>plt.plot(np.real(y), np.imag(y)) plt.xlabel('Re(y)') plt.ylabel('Im(y)') plt.show()</p>"}]}