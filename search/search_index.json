{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":""},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p>Este proyecto documenta el m\u00e9todo de Runge-Kutta de cuarto orden (RK4) para resolver ecuaciones diferenciales ordinarias. En este caso, aplicamos el m\u00e9todo al problema din\u00e1mico de valor inicial:</p> \\[ \\frac{dy}{dt} = f(t, y); \\quad y(t_0) = y_0 \\]"},{"location":"explanation/","title":"Explicaci\u00f3n del M\u00e9todo RK4","text":"<p>El m\u00e9todo RK4 es un m\u00e9todo num\u00e9rico para aproximar soluciones de ecuaciones diferenciales ordinarias. Calcula cuatro inclinaciones intermedias para mejorar la precisi\u00f3n de la soluci\u00f3n en cada paso:</p> \\[ k_1 = h f(t_n, y_n) \\] \\[ k_2 = h f\\left(y_n + \\frac{k_1}{2}, t_n + \\frac{h}{2}\\right) \\] \\[ k_3 = h f\\left(y_n + \\frac{k_2}{2}, t_n + \\frac{h}{2}\\right) \\] \\[ k_4 = h f(y_n + k_3, t_n + h) \\] <p>Finalmente, la soluci\u00f3n en el siguiente paso es:</p> \\[ y_{n}(t_n +h) = y(t) + \\frac{1}{6}(k_1 + 2k_2 + 2k_3 + k_4) \\]"},{"location":"reference/","title":"Referencia de Funciones","text":""},{"location":"reference/#dyn_generatort-y","title":"<code>dyn_generator(t, y)</code>","text":"<p>Genera la din\u00e1mica para el sistema dado.</p>"},{"location":"reference/#argumentos","title":"Argumentos","text":"<ul> <li><code>t</code> (float): Tiempo actual.</li> <li><code>y</code> (ndarray): Estado actual del sistema.</li> </ul>"},{"location":"reference/#retorno","title":"Retorno","text":"<ul> <li><code>ndarray</code>: Derivada del estado.</li> </ul>"},{"location":"reference/#ejemplo-de-uso","title":"Ejemplo de uso","text":"<p><code>python dy_dt = dyn_generator(0, np.array([1, 0]))</code></p>"},{"location":"tutorials/","title":"Ejemplo de uso del M\u00e9todo RK4","text":"<p>A continuaci\u00f3n, se muestra un ejemplo de uso del m\u00e9todo RK4 aplicado a la din\u00e1mica del sistema. Utilizamos los datos de <code>stateQuant00</code> y <code>stateQuant11</code> en funci\u00f3n del tiempo.</p> <pre><code>\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Definici\u00f3n de la matriz identidad\nidentityMatrix = np.array([[1, 0], [0, 1]])\nprint(identityMatrix)\n\n# Operaciones con matrices\nidentityMatrix.shape\nidentityMatrix + identityMatrix\n\n# Matriz de ejemplo\naEx = np.array([[0, 1], [1, 0]])\nnp.dot(aEx, aEx)  # Producto matricial A*B\n\n# Constante imaginaria\niConst = 1.0j\nprint(iConst)\n\n# Operador\noOper = np.array([[0, 1], [1, 0]])\nprint(oOper)\n\n# Estado inicial\nyInit = np.array([[1, 0], [0, 0]])\nprint(yInit)\n\n# Definici\u00f3n de la funci\u00f3n de din\u00e1mica\ndef dyn_generator(oper, state):\n    return -1 * 1.0j * (np.dot(oper, state) - np.dot(state, oper))\n\n# Evaluar la funci\u00f3n de din\u00e1mica\nprint(dyn_generator(oOper, yInit))\n\n# Definici\u00f3n de la funci\u00f3n RK4\ndef rk4(func, oper, state, h):\n    k_1 = h * func(oper, state)\n    k_2 = h * func(oper, state + k_1 / 2)\n    k_3 = h * func(oper, state + k_2 / 2)\n    k_4 = h * func(oper, state + k_3)\n    return state + 1 / 6 * (k_1 + 2 * k_2 + 2 * k_3 + k_4)\n\n# Evaluar la funci\u00f3n RK4\nprint(rk4(dyn_generator, oOper, yInit, 0.5))\n\n# Crear el arreglo de tiempos\ntimes = np.linspace(0, 10, num=100)\n\n# Paso temporal\nh = times[1]\n\n# Copia profunda del estado inicial\nyCopy = yInit.copy()\n\n# Inicializar arreglos para almacenar resultados\nstateQuant00 = np.zeros(times.size)\nstateQuant11 = np.zeros(times.size)\n\n# Bucle para actualizar el estado\nfor tt in range(times.size):\n    stateQuant00[tt] = yInit[0, 0].real\n    stateQuant11[tt] = yInit[1, 1].real\n\n    # Invocar la funci\u00f3n RK4\n    yN = rk4(dyn_generator, oOper, yInit, h)\n    yInit = yN\n\n# Graficar los resultados\nplt.style.use('_mpl-gallery')\n\n# Definir los datos para la gr\u00e1fica\ny = stateQuant00\nx = times\ny2 = stateQuant11\nx2 = times\n\n# Crear la gr\u00e1fica\nfig, ax = plt.subplots()\n\n# Graficar los datos con colores diferentes\nax.plot(x2, y2, 'x', markeredgewidth=2, label='StateQuant11', color='blue')  # Gr\u00e1fica de stateQuant11 en azul\nax.plot(x, y, linewidth=4.0, label='StateQuant00', color='orange')  # Gr\u00e1fica de stateQuant00 en naranja\n\n# A\u00f1adir etiquetas a los ejes y t\u00edtulo\nplt.xlabel('Tiempo (s)')\nplt.ylabel('Estado')\nplt.title('M\u00e9todo Runge-Kutta de orden 4 (RK4)')\nplt.legend()\n\n# Guardar la gr\u00e1fica en la carpeta docs\nplt.savefig('/home/celeste_us/metodoRK4/docs/grafica_rk4.png')  # Guardar la gr\u00e1fica\n\n# Mostrar el gr\u00e1fico en Jupyter Notebook\nplt.show()\n\n</code></pre> <p></p>"}]}